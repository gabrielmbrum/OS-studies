begin with 
    <> movl 21, %eax 

system translate the virtual address 21 into physical address 117
before load to address 117, fetch the proper page table entry (PTE) from process's page table
perform translation, and finally get the data from physical memory

hardware must know where the page table is for the currently-running process
lets assume a single page-table base register conatins the physical address of the page table
to find the location of PTE, hw perform the following functions

    <> VPN = (VirtualAddress & VPN_MASK) >> SHIFT
    <> PTEAddr = PageTableBaseRegister + (VPN * sizeof(PTE))

VPN MASK picks out the VPN bits from the full virtual address 
SHIFT is set to 4 (we are using a 16 bytes address space with 4 bytes pages)
the shifts make virtual address 21 (010101) becomes 01 -> i.e virutal page 1
then we use this value as a index into the array of PTEs

hardware fech the PTE from memory -> extract the PFN and concate with the offset
physical address is formed!

<> offset = VirtualAddress & OFFSET_MASK
<> PhysAddr = (PFN << SHIFT) | offset

/******************** FULL CODE **************************/

// extract the VPN from the virtual address
VPN = (VirtualAddress & VPN_MASK) >> SHIFT

// form the address of the page-table entry
PTEAddr = PTBR + (VPN * sizeof(PTE))

// fetch the PTE
PTE = AccessMemory(PTEAddr)

// check if proccess can access the page
if (PTE.Valid == false)
  RaiseException(SEGMENTATION_FAULT)
else if (CanAccess(PTE.ProtectBits) == false)
  RaiseException(PROTECTION_FAULT)
else 
  offset = VirtualAddress & OFFSET_MASK
  PhysAddr = (PFN << SHIFT) | offset
  Register = AccessMemory(PhysAddr)

/******************** FULL CODE **************************/