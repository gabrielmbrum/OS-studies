# 31.1 semaphores: a definition

it's a object with an integer value that we can manipulate with two routines.

  sem_wait()
  sem_post()

we first must initialize the semaphore

  <code>
  
  #include <semaphore.h>
  sem_t s;
  sem_init(&s, 0, 1);

  </code>

third arg: value that will be initialized
second arg: 0 indicates that the semaphore is shared between threads in the same process

after initialized, we use sem_wait() and sem_post()

  <code>

  int sem_wait (sem_t *s) {
    decrement the value of semaphore s by one
    wait if value of semaphore s is negative
  }

  int sem_post (sem_t *s) {
    increment the value of semaphore s by one
    if there are one or more threads waiting, wake one
  }

  </code>

aspects of the interface
  sem_wait():
    - will return right away, or
    - will cause the caller to suspend execution waiting for a post

  sem_post():
    - does not wait
    - rather, it simply increments the value of the s and then 
    - if there is a thread waiting, wakes one up
  
  the value of semaphore:
    - when negative, is equal to the number of waiting threads

# 31.2 binary semaphores (locks)

  <code>

  sem_t m;
  sem_init(&m, 0, X);

  sem_wait(&m);
  // critical section
  sem_post(&m);

  </code>

X must be 1

the thread has 3 schedular states: running, ready and slepping

# 31.3 semaphores as condition variables

semaphores are also useful when a thread wants to halt its progress waiting for a condition to become true

example:
  a thread is waiting for something to happen, while a differente thread is making that something happen and when it does, it wakes up the waiting thread

  <code>

  sem_t s;

  void *
  child(void *arg) {
    printf("child\n");
    sem_post(&s);
    return NULL;
  }

  int
  main(int argc, char *argv[]) {
    sem_init(&s, 0, X);
    printf("parent: begin\n");
    pthread_t c;
    Pthread_create(c, NULL, child, NULL);
    sem_wait(&s);
    printf("parent: end\n");
    return 0;
  }

  </code>

X must be set to 0

# 31.4 the producer/consumer (bounded-buffer) problem



