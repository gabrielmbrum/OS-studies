types of memory
  - stack (automatic)
    -> allocation and deallocations are implicity by the compiler
    -> example of function: you declare a 'int x;' inside func()
        creates stack's space for it, when you returns from function,
        dealloacates the mem for you; thus, if you want to keep this var
        you wont use stack

  - heap
    -> explicity handled
    -> malloc(): requests heap space in the amount that you asked for

the malloc() call
  - single parameter: size_t (how many bytes you need)

the free() call
  - deallocates memory 
  ex.:
    int *x = malloc(sizeof(int));
    free(x);

common errors
  - forgetting to allocate memory 
  - not allocating enough memory
  - forgetting to initialize allocated memory
  - forgetting to free memory (memory leak)
  - freeing memory before you are done with it
  - freeing memory repeatedly